Episode 3: Generating Signals
-----------------------------

.. include:: ../../../_include/substitutions.rst

In this episode, you learn how to generate test signals with g.Pype.

.. tab-set::

   .. tab-item:: Read
      :sync: read


      We start with the same code from the previous episode. Note that the |Generator| constructor
      parameters ``channel_count``, ``signal_frequency``, ``signal_shape``, ``signal_amplitude``,
      and ``noise_amplitude`` are now explicitly set. We will explore their meaning in the following.

      .. literalinclude:: ../../../../examples/s1e3_generator.py
         :language: python
         :lines: 6-9,11-13,15-20,22-23,25-26,28-29,31-33
         :lineno-start: 1
         :linenos:
         :dedent: 0
         :emphasize-lines: 8-12

      But first, run the script and make sure it produces the same output as before.

      .. figure:: ../../../_static/screenshots/s1e3_1.png
         :alt: S1E3 example screenshot
         :figclass: screenshot

         A minimal g.Pype application running with a signal generator and time series scope.



      Now, let's learn how to customize the signal generated by the |Generator| node.

      .. grid:: 1 1 1 1
         :gutter: 2

         .. grid-item-card:: Channel Count

            The Generator can produce multiple channels in parallel. The default is eight channels.
            Change the channel count to 4 via ``channel_count=4`` in the parameter list. Run the script
            again and observe that only four channels are shown.

            .. figure:: ../../../_static/screenshots/s1e3_2.png
               :alt: S1E3 example screenshot
               :figclass: screenshot

               Reducing the channel count to 4.

         .. grid-item-card:: Signal Frequency

            You can set the frequency of the generated signal in Hertz (Hz). The default is 10 Hz.
            Change the signal frequency to 1 Hz via ``signal_frequency=1`` in the parameter list.
            Run the script again and observe how slow the waves are now.

            .. figure:: ../../../_static/screenshots/s1e3_3.png
               :alt: S1E3 example screenshot
               :figclass: screenshot

               Slowing down the sine waves to 1 Hz.

         .. grid-item-card:: Signal Shape

            The Generator provides three predefined signal shapes you can choose from:

            - ``Generator.SHAPE_SINUSOID`` -- Sinusoidal waveform (default)
            - ``Generator.SHAPE_RECTANGULAR`` -- Square wave
            - ``Generator.SHAPE_PULSE`` -- Brief pulses at specified frequency

            Set ``signal_shape=gp.Generator.SHAPE_RECTANGULAR`` in the parameter list and run the
            script again. Observe how the sine waves have turned into rectangular ones.

            .. figure:: ../../../_static/screenshots/s1e3_4.png
               :alt: S1E3 example screenshot
               :figclass: screenshot

               Changing signal shape to rectangular waveforms.

         .. grid-item-card:: Signal Amplitude

            You can set the amplitude of the generated signal in µV. Change the amplitude via
            ``signal_amplitude=10`` in the parameter list. Run the script again and
            observe how small the signals have become.

            .. figure:: ../../../_static/screenshots/s1e3_5.png
               :alt: S1E3 example screenshot
               :figclass: screenshot

               Reducing signal amplitude to 10 µV.


         .. grid-item-card:: Noise

            It is also possible to add noise to the signal. By default, no noise is added.
            Set ``noise_amplitude=10`` to add white Gaussian random noise with standard
            deviation of 10 µV to the signal. Run the script again and observe how
            much noise is there.

            .. figure:: ../../../_static/screenshots/s1e3_6.png
               :alt: S1E3 example screenshot
               :figclass: screenshot

               Adding noise with 10 µV standard deviation to the signal.

            You can also set ``signal_amplitude=0`` while keeping the noise amplitude
            to generate pure noise. This can be useful for generating more complex
            signals, as we will see later in this training. Run the script again
            and observe that only noise remains.

            .. figure:: ../../../_static/screenshots/s1e3_7.png
               :alt: S1E3 example screenshot
               :figclass: screenshot

               Generating pure noise by setting signal amplitude to 0.

      Done! You are now familiar with the most important |Generator| settings to produce
      a variety mixtures of signals and noise.

      .. grid:: 1 1 1 1
         :gutter: 2

         .. grid-item-card:: Summary

            In this episode, you learned how to adjust the |Generator| parameters to:

            - Change the number of channels
            - Adjust signal frequency and amplitude
            - Select different signal shapes
            - Add and control noise

            All these parameters can be combined to create a wide variety of test signals for your experiments.
            Note that there are additional options available for advanced use cases. We will cover them in future episodes.

      Proceed to the next episode to explore how |TimeSeriesScope| visualizes time series data in g.Pype.


   .. tab-item:: Code
      :sync: code

      .. s1e3_generator.py begin


      **File s1e3_generator.py** -- `View file on GitHub <https://github.com/gtec-medical-engineering/gpype/blob/main/examples/s1e3_generator.py>`_



      .. literalinclude:: ../../../../examples/s1e3_generator.py
         :language: python
         :linenos:
         :dedent: 0

      .. s1e3_generator.py end
