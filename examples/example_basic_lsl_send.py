"""
Basic LSL Send Example - Lab Streaming Layer Data Transmission

This example demonstrates how to stream data over the network using Lab
Streaming Layer (LSL) protocol. LSL is the standard for real-time data
exchange in neuroscience research, enabling communication between different
BCI applications, analysis tools, and recording systems.

What this example shows:
- Generating synthetic 8-channel EEG-like signals with noise
- Capturing keyboard events as experimental markers
- Merging signal and event data using Router
- Streaming combined data over LSL network protocol
- Headless operation (no GUI) for dedicated streaming applications

Expected behavior:
When you run this example:
- LSL stream becomes discoverable on the local network
- Other LSL applications can connect and receive the data stream
- Data includes 8 signal channels + 1 event channel
- Keyboard events are transmitted as numerical markers
- Console shows "Pipeline is running. Press enter to stop."

Network streaming details:
- Protocol: Lab Streaming Layer (LSL)
- Stream name: Automatically generated by LSLSender
- Data format: 9 channels (8 signals + 1 events)
- Sampling rate: 250 Hz
- Discovery: Automatic via LSL network protocol

Real-world applications:
- Multi-application BCI systems (data sharing between tools)
- Real-time analysis in separate applications (MATLAB, Python)
- Recording with third-party software (LSL Recorder)
- Distributed BCI systems across multiple computers
- Integration with analysis frameworks (EEGLAB, MNE-Python)
- Real-time feedback and visualization tools

Common LSL ecosystem:
- Data sources: g.Pype, OpenViBE, BCI2000, hardware drivers
- Data sinks: LSL Recorder, MATLAB LSL toolbox, MNE real-time
- Analysis tools: Real-time signal processing and classification
- Visualization: Real-time plotting and monitoring applications

Usage:
    1. Run: python example_basic_lsl_send.py
    2. Use LSL viewer or example_basic_lsl_receive.py to see the stream
    3. Press arrow keys to send event markers
    4. Press Enter in console to stop streaming

Prerequisites:
    - pylsl library installed (pip install pylsl)
    - Network connectivity for LSL discovery
"""
import gpype as gp

fs = 250  # Sampling frequency in Hz

if __name__ == "__main__":
    # Create processing pipeline (no GUI needed for streaming)
    p = gp.Pipeline()

    # Generate synthetic 8-channel EEG-like signals
    source = gp.Generator(
        sampling_rate=fs,
        channel_count=8,  # 8 EEG channels
        signal_frequency=10,  # 10 Hz alpha rhythm
        signal_amplitude=10,  # Signal strength
        signal_shape="sine",  # Clean sine waves
        noise_amplitude=10,
    )  # Background noise

    # Capture keyboard input as event markers
    keyboard = gp.Keyboard()  # Arrow keys -> event codes

    # Combine signal data (8 channels) + keyboard events (1 channel)
    router = gp.Router(input_selector=[gp.Router.ALL, gp.Router.ALL])

    # LSL sender for network streaming
    sender = gp.LSLSender()  # Creates discoverable LSL stream

    # Connect processing chain: signals + events -> network stream
    p.connect(source, router["in1"])  # Signal data -> Router input 1
    p.connect(keyboard, router["in2"])  # Event data -> Router input 2
    p.connect(router, sender)  # Combined data -> LSL stream

    # Start headless streaming operation
    p.start()  # Begin data streaming
    input("Pipeline is running. Press enter to stop.")  # Wait for user
    p.stop()  # Stop streaming and cleanup
