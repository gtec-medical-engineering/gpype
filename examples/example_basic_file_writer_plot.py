"""
Basic File Plot Example - Offline Data Analysis and Visualization

This example demonstrates how to load and visualize data recorded from g.Pype
FileWriter nodes. It complements example_basic_file_writer_record.py by showing
how to analyze the recorded data offline using standard Python tools.

What this example shows:
- Loading CSV files created by g.Pype FileWriter
- Automatically finding the most recent recording file
- Creating multi-channel EEG-style plots with proper scaling
- Visualizing both signal data and event markers
- Using matplotlib for BCI data visualization

Expected input:
CSV files generated by example_basic_file_writer_record.py containing:
- Column 0: Sample index (timestamp)
- Columns 1-8: Signal data from 8 channels
- Column 9: Event markers (keyboard events: 37,38,39,40)

Expected output:
Multi-channel plot displaying:
- 8 signal channels stacked vertically with offset
- Event markers visible as spikes in the bottom channel
- Proper channel labeling and grid lines
- Professional EEG-style visualization format

Workflow:
1. Run example_basic_file_writer_record.py to create data
2. Press arrow keys to generate event markers during recording
3. Close recording window to save CSV file
4. Run this script to visualize the recorded data

Real-world applications:
- Offline BCI data analysis
- Event-related potential (ERP) visualization
- Quality assessment of recorded data
- Validating experimental paradigms

Usage:
    python example_basic_file_writer_plot.py

Dependencies:
    - pandas (data loading and manipulation)
    - matplotlib (plotting and visualization)
"""
import pandas as pd
import matplotlib.pyplot as plt
import glob
import os

# Find the most recent CSV file from g.Pype recordings
csv_files = glob.glob("example_writer*.csv")
if not csv_files:
    raise FileNotFoundError("No CSV files starting with 'example_' found.")
file_path = max(csv_files, key=os.path.getmtime)  # Most recent file

# Load recorded data into pandas DataFrame
data = pd.read_csv(file_path)

# Extract time index and channel data
index = data["Index"]  # Sample timestamps
channels = data.columns[1:]  # All data columns (signals + events)

# Create multi-channel EEG-style plot
plt.figure(figsize=(10, 6))

# Channel stacking parameters for clear visualization
offset = -100  # Vertical spacing between channels
yticks = []  # Y-axis tick positions
yticklabels = []  # Y-axis tick labels

# Plot each channel with vertical offset
for i, ch in enumerate(channels):
    channel_offset = i * offset
    plt.plot(index, data[ch] + channel_offset, label=ch)
    yticks.append(channel_offset)
    yticklabels.append(f"Ch{i + 1}")

# Configure plot appearance
plt.yticks(yticks, yticklabels)
plt.xlabel("Sample Index")
plt.title("EEG Recordings")
plt.grid(True, axis="y", linestyle="--", alpha=0.6)
plt.ylim((len(channels)) * offset, -offset)

# Display the plot
plt.tight_layout()
plt.show()
